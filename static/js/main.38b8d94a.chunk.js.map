{"version":3,"sources":["components/navbar/DrawerToggleButton.js","components/navbar/Navbar.js","components/navbar/SideDrawer.js","components/navbar/Backdrop.js","pages/Home.js","pages/About.js","pages/Project.js","pages/Contact.js","App.js","serviceWorker.js","index.js"],"names":["drawerToggleButton","props","className","onClick","click","navbar","to","class","drawerClickHandler","sideDrawer","drawerClasses","show","href","backdrop","home","about","project","contact","App","state","sideDrawerOpen","drawerToggleClickHandler","setState","prevState","backdropClickHandler","this","path","exact","component","Home","Project","About","Contact","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mXAWeA,G,kBARY,SAAAC,GAAK,OAC5B,4BAAQC,UAAU,gBAAgBC,QAASF,EAAMG,OAC7C,yBAAKF,UAAU,uBACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,0B,OCqCRG,EAvCA,SAAAJ,GAAK,OAChB,4BAAQC,UAAU,UACd,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,eACX,kBAAC,IAAD,CAAMI,GAAG,KACL,yBAAKJ,UAAU,gBACX,yBAAKA,UAAU,cACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,aAAf,cACA,yBAAKA,UAAU,cAAf,yBAKhB,yBAAKA,UAAU,WAEf,yBAAKA,UAAU,2BACX,4BACI,kBAAC,IAAD,CAAMI,GAAG,KACL,sCAEJ,kBAAC,IAAD,CAAMA,GAAG,YACL,uCAAY,uBAAGC,MAAM,iBAEzB,kBAAC,IAAD,CAAMD,GAAG,UACL,sCAEJ,kBAAC,IAAD,CAAMA,GAAG,YACL,0CAIZ,yBAAKJ,UAAU,wBACX,kBAAC,EAAD,CAAoBE,MAAOH,EAAMO,yBCjBlCC,G,MAlBI,SAAAR,GACf,IAAIS,EAAgB,cAKpB,OAJIT,EAAMU,OACND,EAAgB,oBAIhB,yBAAKR,UAAWQ,GACZ,4BACI,4BAAI,uBAAGE,KAAK,KAAR,UACJ,4BAAI,uBAAGA,KAAK,YAAR,aACJ,4BAAI,uBAAGA,KAAK,UAAR,UACJ,4BAAI,uBAAGA,KAAK,YAAR,gBCRLC,G,MAJE,SAAAZ,GAAK,OAClB,yBAAKC,UAAU,WAAWC,QAASF,EAAMG,UCI9BU,EANF,SAAAb,GAAK,OACd,6BACI,4CCIOc,EAND,SAAAd,GAAK,OACf,6BACI,6CCIOe,EANC,SAAAf,GAAK,OACjB,6BACI,+CCIOgB,EANC,SAAAhB,GAAK,OACjB,6BACI,+C,OCkDOiB,E,4MA1CbC,MAAQ,CACNC,gBAAgB,G,EAGlBC,yBAA2B,WACzB,EAAKC,UAAS,SAACC,GACb,MAAO,CAAEH,gBAAiBG,EAAUH,oB,EAIxCI,qBAAuB,WACrB,EAAKF,SAAS,CAAEF,gBAAgB,K,uDAIhC,IAAIP,EAMJ,OAJIY,KAAKN,MAAMC,iBACbP,EAAW,kBAAC,EAAD,CAAUT,MAAOqB,KAAKD,wBAIjC,kBAAC,IAAD,KACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,CAAQM,mBAAoBiB,KAAKJ,2BACjC,kBAAC,EAAD,CAAYV,KAAMc,KAAKN,MAAMC,iBAC5BP,EAED,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,WAAWE,UAAWE,IAClC,kBAAC,IAAD,CAAOJ,KAAK,SAASE,UAAWG,IAChC,kBAAC,IAAD,CAAOL,KAAK,WAAWE,UAAWI,Y,GAlC9BC,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.38b8d94a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './DrawerToggleButton.css';\r\n\r\nconst drawerToggleButton = props => (\r\n    <button className=\"toggle_button\" onClick={props.click}>\r\n        <div className=\"toggle_button_line\" />\r\n        <div className=\"toggle_button_line\" />\r\n        <div className=\"toggle_button_line\" />\r\n    </button>\r\n);\r\n\r\nexport default drawerToggleButton;","import React from 'react';\r\nimport './Navbar.css';\r\nimport DrawerToggleButton from './DrawerToggleButton';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst navbar = props => (\r\n    <header className=\"navbar\">\r\n        <nav className=\"navbar_navigation\">\r\n            <div className=\"navbar_logo\">\r\n                <Link to=\"/\">\r\n                    <div className=\"logo_wrapper\">\r\n                        <div className=\"logo_icon\"></div>\r\n                        <div className=\"logo_desc\">\r\n                            <div className=\"logo_name\">Duong Pham</div>\r\n                            <div className=\"logo_title\">SOFTWARE ENGINEER</div>\r\n                        </div>\r\n                    </div>\r\n                </Link>\r\n            </div>\r\n            <div className=\"spacer\" >\r\n            </div>\r\n            <div className=\"navbar_navigation_items\">\r\n                <ul>\r\n                    <Link to=\"/\">\r\n                        <li>Start</li>\r\n                    </Link>\r\n                    <Link to=\"/project\">\r\n                        <li>Project <i class=\"arrow down\"></i></li>\r\n                    </Link>\r\n                    <Link to=\"/about\">\r\n                        <li>About</li>\r\n                    </Link>\r\n                    <Link to=\"/contact\">\r\n                        <li>Contact</li>\r\n                    </Link>\r\n                </ul>\r\n            </div>\r\n            <div className=\"navbar_toggle_button\">\r\n                <DrawerToggleButton click={props.drawerClickHandler} />\r\n            </div>\r\n        </nav>\r\n    </header>\r\n);\r\n\r\nexport default navbar;","import React from 'react';\r\nimport './SideDrawer.css';\r\n\r\nconst sideDrawer = props => {\r\n    let drawerClasses = 'side_drawer';\r\n    if (props.show) {\r\n        drawerClasses = 'side_drawer open';\r\n    }\r\n\r\n    return (\r\n        <nav className={drawerClasses}>\r\n            <ul>\r\n                <li><a href=\"/\">Start</a></li>\r\n                <li><a href=\"/project\">Projects</a></li>\r\n                <li><a href=\"/about\">About</a></li>\r\n                <li><a href=\"/contact\">Contact</a></li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default sideDrawer;","import React from 'react';\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = props => (\r\n    <div className=\"backdrop\" onClick={props.click} />\r\n);\r\n\r\nexport default backdrop;","import React from 'react';\r\n\r\nconst home = props => (\r\n    <div>\r\n        <h1>Home Page!</h1>\r\n    </div>\r\n);\r\n\r\nexport default home;","import React from 'react';\r\n\r\nconst about = props => (\r\n    <div>\r\n        <h1>About Page!</h1>\r\n    </div>\r\n);\r\n\r\nexport default about;","import React from 'react';\r\n\r\nconst project = props => (\r\n    <div>\r\n        <h1>Project Page!</h1>\r\n    </div>\r\n);\r\n\r\nexport default project;","import React from 'react';\r\n\r\nconst contact = props => (\r\n    <div>\r\n        <h1>Contact Page!</h1>\r\n    </div>\r\n);\r\n\r\nexport default contact;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/navbar/Navbar'\nimport SideDrawer from './components/navbar/SideDrawer';\nimport Backdrop from './components/navbar/Backdrop';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport Project from './pages/Project';\nimport Contact from './pages/Contact';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nclass App extends React.Component {\n  state = {\n    sideDrawerOpen: false\n  };\n\n  drawerToggleClickHandler = () => {\n    this.setState((prevState) => {\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({ sideDrawerOpen: false })\n  };\n\n  render() {\n    let backdrop;\n\n    if (this.state.sideDrawerOpen) {\n      backdrop = <Backdrop click={this.backdropClickHandler} />;\n    }\n\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navbar drawerClickHandler={this.drawerToggleClickHandler} />\n          <SideDrawer show={this.state.sideDrawerOpen} />\n          {backdrop}\n\n          <main>\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/project\" component={Project} />\n              <Route path=\"/about\" component={About} />\n              <Route path=\"/contact\" component={Contact} />\n            </Switch>\n          </main>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}